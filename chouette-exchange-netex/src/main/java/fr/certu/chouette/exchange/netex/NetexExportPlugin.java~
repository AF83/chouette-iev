package fr.certu.chouette.exchange.netex.exporter;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import lombok.Setter;
import org.apache.log4j.Logger;

import fr.certu.chouette.model.neptune.Line;

import fr.certu.chouette.common.ChouetteException;
import fr.certu.chouette.plugin.exchange.FormatDescription;
import fr.certu.chouette.plugin.exchange.IExportPlugin;
import fr.certu.chouette.plugin.exchange.ParameterDescription;
import fr.certu.chouette.plugin.exchange.ParameterValue;
import fr.certu.chouette.plugin.exchange.SimpleParameterValue;
import fr.certu.chouette.plugin.report.Report;
import fr.certu.chouette.plugin.report.ReportHolder;

/**
 *  Export lines in Netex format
 */
public class NetexExportPlugin implements IExportPlugin<Line>
{

   private static final Logger       logger = Logger.getLogger(NetexExportPlugin.class);
   private FormatDescription         description;

   /**
    * Export lines in Neptune XML format
    */
   public NetexExportPlugin()
   {
   }

   /* (non-Javadoc)
    * @see fr.certu.chouette.plugin.exchange.IExchangePlugin#getDescription()
    */
   @Override
   public FormatDescription getDescription()
   {
      return description;
   }

   /* (non-Javadoc)
    * @see fr.certu.chouette.plugin.exchange.IExportPlugin#doExport(java.util.List, java.util.List, fr.certu.chouette.plugin.report.ReportHolder)
    */
   @Override
   public void doExport(List<Line> beans, List<ParameterValue> parameters, ReportHolder reportContainer)
   throws ChouetteException
   {
       ScriptingContainer container = new ScriptingContainer();
       container.setLoadPaths(Arrays.asList("lib"));
       container.runScriptlet("require 'exchange-netex' \n Netex::StopTime.load('ExchangeNetex.jar')" );
   }

   public static void main(String[] args) {
        ScriptingContainer container = new ScriptingContainer();
        container.setLoadPaths(Arrays.asList("lib"));
        container.runScriptlet("require 'exchange-netex' \n Netex::StopTime.load('ExchangeNetex.jar')" );
    }


}

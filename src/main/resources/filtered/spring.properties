# Paramètres de la base
# Le nom du driver utilisée pour l'accès aux bases de données en dehors de Hibernate.
# En principe à ne pas changer lors du déploiement.
jdbc.driver = org.postgresql.Driver
# URL d'accès à la base : "nom du driver"://"nom de l'hôte":"numéro de port"/"nom de la base"
jdbc.url = jdbc:postgresql://${database.hostname}:${database.port}/${database.name}

# Paramètres bases pour accès Hibernate
# L'identifiant d'accès à la base
hibernate.username = ${hibernate.username}
# Le mot de passe d'accès à la base de données
hibernate.password = ${hibernate.password}
# Le shéma de la base pour stocker les données
database.schema = ${database.schema} 

# Param\u00e8tres bases pour acc\u00e8s JDBC direct
# L'identifiant d'accès à la base
jdbc.username = ${jdbc.username}
# Le mot de passe d'accès à la base de données
jdbc.password = ${jdbc.password}

# Répertoire des fichiers temporaires créés lors d'un import
dir.temp = ${dir.temp}

# R\u00e9pertoire de donn\u00e9es des tests
test.inputData.dir = ${test.inputData.dir}

# Param\u00e8tre pour le verrouillage des acc\u00e8s concurrents
action.lock.timeout = ${action.lock.timeout}

# Param\u00e8tres pour l'affichage de la liste des horaires des courses
vehicleJourney.displayed = ${vehicleJourney.displayed}
page.displayed = ${page.displayed}
calendar.displayed = ${calendar.displayed}

# Param\u00e8tre pour l'import CSV
csv.field.separator = ${csv.field.separator}

# Param\u00e8tre qui identifie la centrale d'information
system.code = ${system.code}

# Version de chouette déployé
applie.version=${pom.version}
# export / delette AMIVIF
ligne.amivif = ${ligne.amivif}
# import CSV Multi Lignes
import.csv.multilignes = ${import.csv.multilignes}
import.csv.log=${import.csv.log}
# import CSV Hastus
import.csv.hastus=${import.csv.hastus}
import.csv.hastus.log=${import.csv.hastus.log}
import.csv.hastus.tmp=${import.csv.hastus.tmp}
# Utilisée dans la génération des "objectId"
hastus.code = ${hastus.code}
hastus.special=${hastus.special}
hastus.space=${hastus.space}

# Import altibus au format CSV
import.csv.altibus=${import.csv.altibus}

# Code SRID pour les coordonnées géographiques
Lambert.SRID = ${Lambert.SRID}
WGS84.SRID = ${WGS84.SRID}

# Definition des calendriers d'application. 
validation.tm.inclusif=${validation.tm.inclusif}
validation.tm.geometry=${validation.tm.geometry}

# Suppression des lignes avec ou sans les objets connexes non utilisés par d'autres lignes
destructionLigne.detruireAvecTMs=${destructionLigne.detruireAvecTMs}
destructionLigne.detruireAvecArrets=${destructionLigne.detruireAvecArrets}
destructionLigne.detruireAvecTransporteur=${destructionLigne.detruireAvecTransporteur}
destructionLigne.detruireAvecReseau=${destructionLigne.detruireAvecReseau}

# Import Pegase
import.csv.pegase=${import.csv.pegase}
import.csv.pegase.log=${import.csv.pegase.log}

# Import altibus au format XML
import.xml.altibus=${import.xml.altibus}
import.xml.altibus.log=${import.xml.altibus.log}

# Comparaison entre des fichiers Neptunes
menu.comparison.enabled=${menu.comparison.enabled}

# Paramètres du mail de notification de l'Export Massive
massiveExport.notification.email=${massiveExport.notification.email}
massiveExport.notification.smtp=${massiveExport.notification.smtp}
massiveExport.ihm.excludeConnectionLinks=${massiveExport.ihm.excludeConnectionLinks}

# Paramètres géographiques
map.geoportalApiKey=${map.geoportalApiKey}
map.baseLayerSource=${map.baseLayerSource}

# Export GTFS
network.gtfs = ${network.gtfs}

# Export CSV multilignes
genericcsv.calendar.date = ${genericcsv.calendar.date}